<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tech Changes The World]]></title>
  <link href="http://cnut-wp.github.com/atom.xml" rel="self"/>
  <link href="http://cnut-wp.github.com/"/>
  <updated>2013-07-19T19:09:54+08:00</updated>
  <id>http://cnut-wp.github.com/</id>
  <author>
    <name><![CDATA[Peng Wang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[On Top of Tides]]></title>
    <link href="http://cnut-wp.github.com/blog/2013/07/19/On-Top-of-Tides/"/>
    <updated>2013-07-19T18:00:00+08:00</updated>
    <id>http://cnut-wp.github.com/blog/2013/07/19/On-Top-of-Tides</id>
    <content type="html"><![CDATA[<p>最近在看《浪潮之巅》，感觉这是一本很不错的书，读这本书的时候让自己的计算机行业有了更多的理解。在这里推荐一下。</p>

<blockquote><p>近一百多年来，总有一些公司很幸运地、有意识或无意识地站在技术革命的浪尖之上。在这十几年间，它们代表着科技的浪潮，直到下一波浪潮的来临。</p>

<p>对于一个弄潮的年轻人来讲，最幸运的，莫过于赶上一波大潮</p></blockquote>

<p>上面是书开头的一段话。《浪潮之巅》书中介绍了IT行业各个时期的弄潮儿，也分析了IT行业的各种特点。出于了解历史或者让自己对于IT行业更加了解，这本书都值得一读。</p>

<p>计算机工业的生态链三定律：</p>

<ul>
<li>摩尔定律:当价格不变时，集成电路上可容纳的晶体管数目，约每隔18个月便会增加一倍，性能也将提升一倍。</li>
<li>安迪-比尔定律: What Andy gives, Bill take away。</li>
<li>反摩尔定律：一个IT公司如果今天和18个月前卖掉同样多的、同样的产品，它的营业额就要降一半。</li>
</ul>


<p>摩尔定律，几乎每个IT行业人员都知道。有一种说法是这样的：IT行业为什么能以这么快的速度发展，并且持续这么长时间？因为IT行业的从事者能够不断用新的软硬件去设计新的软硬件，从而能不断保持以指数的速度发展。</p>

<p>安迪-比尔定律，这是我们不断更新我们 PC 的原因。Andy 是 Intel 的老总，Bill 则是 Microsoft 的老总。Microsoft 不断推出新的更强大的系统，但是这些系统只能在更新的硬件上才能跑的起来，为了使用更友好更流畅的系统，没有办法我们只能去更新系统。这也决定了 Microsoft 在 PC 时代位于计算机工业的上游，而生产硬件的公司则位于整个生态的中下游。一个例子就是：由于 Vista 的延期推出，各大 PC 硬件厂商相应的销售受到了很大的影响。</p>

<p>反摩尔定律则对应 IT 公司是致命的。SUN 曾经是打败包括 IBM 在内所有工作站和小型机公司的伟大公司，市值一度超过2000亿美元，公司中也不乏能人。但是它只想通过卖它的硬件赚钱，受反摩尔定律的影响，自己又没有找到新的盈利方式（它毕竟与那么多牛逼的技术，例如风靡全球但是不赚钱的 JAVA），最终被 ORACLE 以74亿美元收购。反摩尔定律要求 IT 公司不断地创新，否则很可能马上走向衰败。反摩尔定律，现在看主要是影响那些以硬件为主的公司，而以软件服务为主的公司，影响着没有那么大，例如现在的 IBM。</p>

<p>书中把许多公司的命运归结于公司的基因，Apple 的基因是创新，所以它能在许多年低谷后重新引领时代，而 SUN 虽然它也有许多能人，但是由于它没有把技术优势转化为利润的基因，而最终没落。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lock free queue]]></title>
    <link href="http://cnut-wp.github.com/blog/2013/05/01/lock-free-queue/"/>
    <updated>2013-05-01T15:08:00+08:00</updated>
    <id>http://cnut-wp.github.com/blog/2013/05/01/lock-free-queue</id>
    <content type="html"><![CDATA[<p>最近，看了一些关于 Lock-Free Queue 的 Paper，感觉挺有意思的。
为什么产生 Lock-Free 的数据结构？原因是这样的，在 Concurrent Programming 中，由于下面的 OS是抢占调度的，完全有可能出现这样一种情况：持有锁的线程被调度走，而等待锁的线程却被调度上 CPU,这样带来的一个后果就是：正在运行的线程由于没有锁而无法推进，它必须得等到持有锁的线程重新被调度上CPU并释放释放锁后才能继续运行。
为了解决这个问题，许多研究工作者就发明了 non-blocking 的数据结构（又叫： Lock-Free Data Structure）。</p>

<pre><code>An implementation of a data structure is nonblocking (also known as lock-free) if it
guarantees that at least one process of those trying to update the data structure
concurrently will succeed in completing its operation within a bounded amount of
time, assuming that at least one process is active, regardless of the state of other
processes.
</code></pre>

<p>Lock-Free 的数据结构保证一个线程总能向前推进，避免了由于持有锁的线程被调度走而带来的开销。 Lock-Free 的数据结构一般需要用到特殊的指令,例如 xadd, Campare-And-Swap。这些指令保证原子地完成相应操作。</p>

<p>回到正文，我们现在来看一下如何实现 Lock-Free 的 Queue.
Queue需要保证先进先出<em>FIFO</em>的顺序，因此相比于List要简单一下。
我们要实现的Queue的两个例子。<img src="http://cnut-wp.github.com/images/queue-example.jpg" alt="queues" />
其中，对于空的Queue，head和tail均指向一个dummy node；对于有三个元素的Queue，head指向一个dummy node，而该dummy node指向Queue的第一个node，tail指向最后一个node。
enqueue过程稍微复杂一点，如图：<img src="http://cnut-wp.github.com/images/enqueue.jpg" alt="enqueue" />
这样的enqueue实现保证了数据链表始终是连续的，即使该enqueue被调度走，其他enqueue还是可以把tail移动到正确的位置正确。
dequeue则比较简单，只需要将相应的head向前一下就可以了。</p>

<p>具体代码：</p>

<pre><code>struct Node {
    int value;
    struct Node* next;
};


static inline
bool CAS(Node** mem, Node* old, Node* newVal)
{
    unsigned long r;
    __asm__ __volatile__("lock cmpxchgq %2,%1"
            : "=a" (r), "+m" (*mem)
            : "r" (newVal), "0" (old)
            : "memory");

    return r == (unsigned long)old ? 1 : 0;
}



Node * head=new Node;
Node * tail=head;

void enqueue(int x){
    Node* q = new Node;
    q-&gt;value = x;
    q-&gt;next = NULL;
    bool succ = false;
    Node *p;
    Node *next;
    do {
        p = tail;
        next = tail-&gt;next;
        if (p == tail) {
            if (next == NULL)
            {
                succ = CAS(&amp;(p-&gt;next), NULL, q);
            } else {
                CAS(&amp;tail,p,p-&gt;next);
            }
        }
    } while (!succ);
    CAS(&amp;tail,p,q);
    return;  
}

int dequeue(){
    Node *p; 
    Node *next;
    bool succ; 
    do{
        p = head;
        next = p-&gt;next;
        if (next == NULL){
            return -1;
        }
        succ = CAS(&amp;head, p, next);
        if (succ == true) {
            if (p == tail) {
                CAS(&amp;tail, tail, next);
            }
        } 
    }while(!succ);
    return p-&gt;next-&gt;value; 
}
</code></pre>

<p>该代码是在64位的Intel处理器上运行。</p>

<p>可以看出上面代码有一个很大的漏洞，就是<strong>没有释放内存</strong>。原因是这样的，因为Lock-Free的Queue要保证无论一个enqueue/dequeue的线程执行到哪里，都可以被调度走而不会导致其他线程阻塞。所以就会出现一种情况:一个dequeue的线程执行到一半的时候，被调度走；这时候其他dequeue的线程把前面线程要dequeue的node 移除了并将内存归还；这时如果前面的线程被调度上CPU，再去用它的之前读到的指针去访问相应内存，就会有问题。所以上面实现中没有释放内存。一个解决办法就是用提供GC的语言实现上面算法。</p>

<p>对于使用Compare-And-Swap原语的Lock-Free数据结构，都要考虑一个<strong>ABA</strong>问题。该个问题是这样的，Compare-And-Swap比较一个内存地址的值是不是还是用户提供的oldValue，如果是，就用用户提供的新的newVal去对该内存地址进行赋值。但是如果该内存地址的值是oldValue，该内存就一定是原来用户看到的状态吗？这是不一定的。有可能出现这种情况，该内存(head/tail)地址的值经过一系列dequeue/enqueue，值有回到了原来的oldValue，但是该oldValue和用户原来看到的oldValue有不同的含义（其他域可能不一样了）。这样就会造成一些问题。一个解决法案就是在扩展oldValue与newValue，使其包含一个递增的计数器。该计数器发生一次dequeue或者一次enqueue值就自增，这样就避免了前面的问题。不过这需要让Compare-And-Swap的位长变大。</p>

<p>性能测试：</p>

<table rules="all" cellpadding="15" border="1">
    <tr>
        <td></td>
        <td>enqueue</td>
        <td> en/de </td>
        <td>dequeue</td>
    </tr>
    <tr>
        <td>lock-free</td>
        <td>113106</td>
        <td>57256</td>
        <td>39831</td>
    </tr>
    <tr>
        <td>lock</td>
        <td>144583</td>
        <td>130820</td>
        <td>135425</td>
    </tr>
    <tr>
        <td></td>
    </tr>
</table>


<p>该测试是这样的，总共有10个线程，每个线程执行10000000操作（enqueue/dequeue）。enqueue列表示10个线程同时去enqueue，en/de表示各有5个线程去做enqueue和dequeue，而dequeue列表示10个线程同时去dequeue。物理机有16个core（Intel(R) Xeon(R) CPU E7310  @ 1.60GHz）。单位毫秒。</p>

<p>参考文档：</p>

<ul>
<li>Nonblocking Algorithms and Preemption-Safe Locking on Multiprogrammed Shared Memory Multiprocessors</li>
<li>Implememting Lock-Free Queues</li>
<li>Formal Verification of a Practical Lock-Free Queue Algorithm</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[all pull few push for git repo]]></title>
    <link href="http://cnut-wp.github.com/blog/2013/03/03/all-pull-few-push/"/>
    <updated>2013-03-03T20:40:00+08:00</updated>
    <id>http://cnut-wp.github.com/blog/2013/03/03/all-pull-few-push</id>
    <content type="html"><![CDATA[<p>这学期我担了一门课的助教。课上需要为学生建立一个 git 仓库。该仓库需要所有学生都有 pull 权限，但是又要赋予几个 TA push 权限。这个要求花了自己一段时间配置。</p>

<p>由于是低年级的学生，并且人数也比较多，所以复杂的授权认证不合适，最好学生什么都不需要做就可以 pull 代码。</p>

<p>git 支持许多协议，例如 http/https，git， ssh。http 可以很方便的让所有学生都能 pull 代码，但是却不能允许 TA push 代码 （或者我不知道如何配置），而 ssh 认证有很好的授权认证，但是它却比较烦。于是我选择了 git 协议。（以上分析来自 Pro Git）</p>

<p>首先，我用 gitolite 去管理所有 git 仓库。gitolite 操作十分地方便。具体参见 gitolite 官网。
需要注意的是，在使用 gitolite 配置仓库权限的时候可以这样写：</p>

<pre><code>repo    yourRepository
    RW+     =   TA
    R       =   daemon
</code></pre>

<p>这样 gitolite 会自动在仓库 yourRepository 中创建一个名字为 daemon-export-ok 的空文件，该文件会让 git daemon 把该仓库 share 出去。
然后再启动 git daemon。</p>

<pre><code>git daemon --reuseaddr --base-path=/example-repositories-dir-path /example-repositories-dir-path
</code></pre>

<p>之后就可以通过下面命令正常 clone 代码了。</p>

<pre><code>git clone git://your-server-name/yourRepository
</code></pre>

<p>说明：</p>

<ul>
<li>&#8211;reuseaddr 参数使得服务无须等到旧的连接尝试过期以后再重启，&#8211;base-path 参数使得 clone 项目的时候不用给出完整的路径，而最后面的路径告诉 Git  Daemon 进程需要导出仓库的位置。</li>
<li>确保启动 git daemon 的用户有读取仓库文件的权限。</li>
<li>可以在系统启动脚本中启动 daemon。</li>
</ul>


<p>参考文档：</p>

<ul>
<li>Pro Git</li>
<li><a href="http://gitolite.com/gitolite/qi.html">gitolite</a></li>
<li><a href="http://gitolite.com/gitolite/qi.html">http://gitolite.com/gitolite/qi.html</a></li>
<li><a href="http://granjow.net/git-read-access.html">http://granjow.net/git-read-access.html</a></li>
<li><a href="http://norbu09.org/2009/08/02/git-via-HTTP-(startup-automation-3).html">http://norbu09.org/2009/08/02/git-via-HTTP-(startup-automation-3).html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello world]]></title>
    <link href="http://cnut-wp.github.com/blog/2013/03/03/hello-world/"/>
    <updated>2013-03-03T18:43:00+08:00</updated>
    <id>http://cnut-wp.github.com/blog/2013/03/03/hello-world</id>
    <content type="html"><![CDATA[<p>A late come, but it is a start. And I hope it have a long life.</p>
]]></content>
  </entry>
  
</feed>
